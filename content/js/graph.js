/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1452.0, "minX": 0.0, "maxY": 21349.0, "series": [{"data": [[0.0, 1452.0], [0.1, 1489.0], [0.2, 1499.0], [0.3, 1505.0], [0.4, 1512.0], [0.5, 1520.0], [0.6, 1549.0], [0.7, 1570.0], [0.8, 1583.0], [0.9, 1606.0], [1.0, 1625.0], [1.1, 1633.0], [1.2, 1645.0], [1.3, 1661.0], [1.4, 1671.0], [1.5, 1682.0], [1.6, 1693.0], [1.7, 1702.0], [1.8, 1712.0], [1.9, 1725.0], [2.0, 1736.0], [2.1, 1747.0], [2.2, 1760.0], [2.3, 1769.0], [2.4, 1783.0], [2.5, 1796.0], [2.6, 1805.0], [2.7, 1818.0], [2.8, 1831.0], [2.9, 1843.0], [3.0, 1855.0], [3.1, 1868.0], [3.2, 1876.0], [3.3, 1883.0], [3.4, 1895.0], [3.5, 1905.0], [3.6, 1914.0], [3.7, 1921.0], [3.8, 1930.0], [3.9, 1949.0], [4.0, 1956.0], [4.1, 1964.0], [4.2, 1972.0], [4.3, 1986.0], [4.4, 1992.0], [4.5, 2003.0], [4.6, 2010.0], [4.7, 2020.0], [4.8, 2027.0], [4.9, 2037.0], [5.0, 2053.0], [5.1, 2061.0], [5.2, 2069.0], [5.3, 2077.0], [5.4, 2088.0], [5.5, 2099.0], [5.6, 2111.0], [5.7, 2116.0], [5.8, 2121.0], [5.9, 2127.0], [6.0, 2138.0], [6.1, 2144.0], [6.2, 2155.0], [6.3, 2161.0], [6.4, 2165.0], [6.5, 2173.0], [6.6, 2179.0], [6.7, 2187.0], [6.8, 2191.0], [6.9, 2196.0], [7.0, 2199.0], [7.1, 2201.0], [7.2, 2202.0], [7.3, 2204.0], [7.4, 2206.0], [7.5, 2209.0], [7.6, 2210.0], [7.7, 2211.0], [7.8, 2212.0], [7.9, 2213.0], [8.0, 2214.0], [8.1, 2216.0], [8.2, 2218.0], [8.3, 2220.0], [8.4, 2222.0], [8.5, 2239.0], [8.6, 2269.0], [8.7, 2280.0], [8.8, 2291.0], [8.9, 2311.0], [9.0, 2318.0], [9.1, 2334.0], [9.2, 2344.0], [9.3, 2353.0], [9.4, 2375.0], [9.5, 2391.0], [9.6, 2403.0], [9.7, 2414.0], [9.8, 2439.0], [9.9, 2456.0], [10.0, 2483.0], [10.1, 2495.0], [10.2, 2514.0], [10.3, 2526.0], [10.4, 2555.0], [10.5, 2566.0], [10.6, 2584.0], [10.7, 2612.0], [10.8, 2642.0], [10.9, 2689.0], [11.0, 2826.0], [11.1, 3138.0], [11.2, 3163.0], [11.3, 3182.0], [11.4, 3212.0], [11.5, 3240.0], [11.6, 3255.0], [11.7, 3274.0], [11.8, 3297.0], [11.9, 3324.0], [12.0, 3348.0], [12.1, 3372.0], [12.2, 3380.0], [12.3, 3400.0], [12.4, 3407.0], [12.5, 3411.0], [12.6, 3418.0], [12.7, 3428.0], [12.8, 3437.0], [12.9, 3451.0], [13.0, 3455.0], [13.1, 3464.0], [13.2, 3471.0], [13.3, 3482.0], [13.4, 3490.0], [13.5, 3504.0], [13.6, 3510.0], [13.7, 3525.0], [13.8, 3540.0], [13.9, 3552.0], [14.0, 3556.0], [14.1, 3569.0], [14.2, 3574.0], [14.3, 3580.0], [14.4, 3589.0], [14.5, 3591.0], [14.6, 3603.0], [14.7, 3608.0], [14.8, 3617.0], [14.9, 3637.0], [15.0, 3645.0], [15.1, 3653.0], [15.2, 3663.0], [15.3, 3669.0], [15.4, 3678.0], [15.5, 3689.0], [15.6, 3697.0], [15.7, 3701.0], [15.8, 3706.0], [15.9, 3707.0], [16.0, 3711.0], [16.1, 3715.0], [16.2, 3718.0], [16.3, 3721.0], [16.4, 3723.0], [16.5, 3726.0], [16.6, 3728.0], [16.7, 3730.0], [16.8, 3733.0], [16.9, 3735.0], [17.0, 3737.0], [17.1, 3739.0], [17.2, 3741.0], [17.3, 3744.0], [17.4, 3748.0], [17.5, 3752.0], [17.6, 3755.0], [17.7, 3759.0], [17.8, 3765.0], [17.9, 3775.0], [18.0, 3783.0], [18.1, 3788.0], [18.2, 3796.0], [18.3, 3806.0], [18.4, 3815.0], [18.5, 3821.0], [18.6, 3831.0], [18.7, 3842.0], [18.8, 3850.0], [18.9, 3855.0], [19.0, 3861.0], [19.1, 3869.0], [19.2, 3879.0], [19.3, 3888.0], [19.4, 3894.0], [19.5, 3909.0], [19.6, 3924.0], [19.7, 3946.0], [19.8, 3955.0], [19.9, 3980.0], [20.0, 3997.0], [20.1, 4015.0], [20.2, 4037.0], [20.3, 4052.0], [20.4, 4067.0], [20.5, 4086.0], [20.6, 4096.0], [20.7, 4097.0], [20.8, 4099.0], [20.9, 4101.0], [21.0, 4104.0], [21.1, 4110.0], [21.2, 4114.0], [21.3, 4115.0], [21.4, 4117.0], [21.5, 4119.0], [21.6, 4120.0], [21.7, 4121.0], [21.8, 4123.0], [21.9, 4129.0], [22.0, 4133.0], [22.1, 4138.0], [22.2, 4144.0], [22.3, 7594.0], [22.4, 7669.0], [22.5, 7710.0], [22.6, 7773.0], [22.7, 7809.0], [22.8, 7909.0], [22.9, 7978.0], [23.0, 8136.0], [23.1, 8183.0], [23.2, 8280.0], [23.3, 8310.0], [23.4, 8327.0], [23.5, 8357.0], [23.6, 8378.0], [23.7, 8386.0], [23.8, 8401.0], [23.9, 8426.0], [24.0, 8519.0], [24.1, 8561.0], [24.2, 8609.0], [24.3, 8660.0], [24.4, 8709.0], [24.5, 8743.0], [24.6, 8766.0], [24.7, 8793.0], [24.8, 8802.0], [24.9, 8827.0], [25.0, 8836.0], [25.1, 8852.0], [25.2, 8860.0], [25.3, 8869.0], [25.4, 8881.0], [25.5, 8897.0], [25.6, 8902.0], [25.7, 8909.0], [25.8, 8914.0], [25.9, 8922.0], [26.0, 8934.0], [26.1, 8938.0], [26.2, 8946.0], [26.3, 8954.0], [26.4, 8959.0], [26.5, 8962.0], [26.6, 8966.0], [26.7, 8978.0], [26.8, 8983.0], [26.9, 8987.0], [27.0, 8994.0], [27.1, 8998.0], [27.2, 9001.0], [27.3, 9007.0], [27.4, 9010.0], [27.5, 9018.0], [27.6, 9024.0], [27.7, 9029.0], [27.8, 9033.0], [27.9, 9036.0], [28.0, 9039.0], [28.1, 9047.0], [28.2, 9053.0], [28.3, 9056.0], [28.4, 9060.0], [28.5, 9063.0], [28.6, 9067.0], [28.7, 9071.0], [28.8, 9075.0], [28.9, 9078.0], [29.0, 9083.0], [29.1, 9086.0], [29.2, 9089.0], [29.3, 9094.0], [29.4, 9100.0], [29.5, 9102.0], [29.6, 9105.0], [29.7, 9112.0], [29.8, 9120.0], [29.9, 9123.0], [30.0, 9126.0], [30.1, 9129.0], [30.2, 9132.0], [30.3, 9136.0], [30.4, 9138.0], [30.5, 9142.0], [30.6, 9146.0], [30.7, 9149.0], [30.8, 9154.0], [30.9, 9156.0], [31.0, 9160.0], [31.1, 9163.0], [31.2, 9165.0], [31.3, 9171.0], [31.4, 9175.0], [31.5, 9182.0], [31.6, 9186.0], [31.7, 9193.0], [31.8, 9198.0], [31.9, 9203.0], [32.0, 9208.0], [32.1, 9211.0], [32.2, 9217.0], [32.3, 9218.0], [32.4, 9222.0], [32.5, 9228.0], [32.6, 9233.0], [32.7, 9236.0], [32.8, 9240.0], [32.9, 9246.0], [33.0, 9254.0], [33.1, 9258.0], [33.2, 9259.0], [33.3, 9261.0], [33.4, 9265.0], [33.5, 9268.0], [33.6, 9272.0], [33.7, 9276.0], [33.8, 9280.0], [33.9, 9286.0], [34.0, 9288.0], [34.1, 9291.0], [34.2, 9295.0], [34.3, 9299.0], [34.4, 9302.0], [34.5, 9306.0], [34.6, 9310.0], [34.7, 9316.0], [34.8, 9320.0], [34.9, 9324.0], [35.0, 9331.0], [35.1, 9334.0], [35.2, 9337.0], [35.3, 9341.0], [35.4, 9345.0], [35.5, 9349.0], [35.6, 9354.0], [35.7, 9358.0], [35.8, 9360.0], [35.9, 9365.0], [36.0, 9370.0], [36.1, 9375.0], [36.2, 9380.0], [36.3, 9384.0], [36.4, 9389.0], [36.5, 9394.0], [36.6, 9398.0], [36.7, 9404.0], [36.8, 9408.0], [36.9, 9413.0], [37.0, 9421.0], [37.1, 9427.0], [37.2, 9429.0], [37.3, 9436.0], [37.4, 9444.0], [37.5, 9448.0], [37.6, 9453.0], [37.7, 9457.0], [37.8, 9461.0], [37.9, 9466.0], [38.0, 9470.0], [38.1, 9473.0], [38.2, 9476.0], [38.3, 9481.0], [38.4, 9484.0], [38.5, 9489.0], [38.6, 9497.0], [38.7, 9503.0], [38.8, 9508.0], [38.9, 9511.0], [39.0, 9516.0], [39.1, 9519.0], [39.2, 9523.0], [39.3, 9525.0], [39.4, 9530.0], [39.5, 9534.0], [39.6, 9538.0], [39.7, 9540.0], [39.8, 9542.0], [39.9, 9545.0], [40.0, 9547.0], [40.1, 9551.0], [40.2, 9554.0], [40.3, 9556.0], [40.4, 9559.0], [40.5, 9560.0], [40.6, 9564.0], [40.7, 9566.0], [40.8, 9568.0], [40.9, 9571.0], [41.0, 9575.0], [41.1, 9578.0], [41.2, 9581.0], [41.3, 9584.0], [41.4, 9586.0], [41.5, 9589.0], [41.6, 9594.0], [41.7, 9597.0], [41.8, 9599.0], [41.9, 9603.0], [42.0, 9607.0], [42.1, 9610.0], [42.2, 9616.0], [42.3, 9619.0], [42.4, 9621.0], [42.5, 9624.0], [42.6, 9628.0], [42.7, 9631.0], [42.8, 9633.0], [42.9, 9636.0], [43.0, 9639.0], [43.1, 9642.0], [43.2, 9644.0], [43.3, 9646.0], [43.4, 9649.0], [43.5, 9652.0], [43.6, 9655.0], [43.7, 9657.0], [43.8, 9660.0], [43.9, 9663.0], [44.0, 9666.0], [44.1, 9667.0], [44.2, 9670.0], [44.3, 9673.0], [44.4, 9676.0], [44.5, 9678.0], [44.6, 9680.0], [44.7, 9683.0], [44.8, 9685.0], [44.9, 9687.0], [45.0, 9688.0], [45.1, 9690.0], [45.2, 9693.0], [45.3, 9695.0], [45.4, 9697.0], [45.5, 9699.0], [45.6, 9701.0], [45.7, 9704.0], [45.8, 9707.0], [45.9, 9709.0], [46.0, 9711.0], [46.1, 9713.0], [46.2, 9715.0], [46.3, 9716.0], [46.4, 9719.0], [46.5, 9721.0], [46.6, 9723.0], [46.7, 9725.0], [46.8, 9727.0], [46.9, 9729.0], [47.0, 9730.0], [47.1, 9732.0], [47.2, 9733.0], [47.3, 9734.0], [47.4, 9736.0], [47.5, 9737.0], [47.6, 9739.0], [47.7, 9740.0], [47.8, 9743.0], [47.9, 9745.0], [48.0, 9746.0], [48.1, 9748.0], [48.2, 9749.0], [48.3, 9751.0], [48.4, 9753.0], [48.5, 9754.0], [48.6, 9757.0], [48.7, 9759.0], [48.8, 9760.0], [48.9, 9761.0], [49.0, 9762.0], [49.1, 9763.0], [49.2, 9765.0], [49.3, 9765.0], [49.4, 9767.0], [49.5, 9769.0], [49.6, 9770.0], [49.7, 9772.0], [49.8, 9775.0], [49.9, 9778.0], [50.0, 9780.0], [50.1, 9782.0], [50.2, 9785.0], [50.3, 9787.0], [50.4, 9789.0], [50.5, 9790.0], [50.6, 9792.0], [50.7, 9793.0], [50.8, 9795.0], [50.9, 9797.0], [51.0, 9799.0], [51.1, 9801.0], [51.2, 9804.0], [51.3, 9805.0], [51.4, 9807.0], [51.5, 9808.0], [51.6, 9809.0], [51.7, 9811.0], [51.8, 9812.0], [51.9, 9815.0], [52.0, 9817.0], [52.1, 9820.0], [52.2, 9824.0], [52.3, 9826.0], [52.4, 9828.0], [52.5, 9830.0], [52.6, 9832.0], [52.7, 9837.0], [52.8, 9838.0], [52.9, 9841.0], [53.0, 9843.0], [53.1, 9846.0], [53.2, 9849.0], [53.3, 9850.0], [53.4, 9852.0], [53.5, 9854.0], [53.6, 9857.0], [53.7, 9861.0], [53.8, 9864.0], [53.9, 9867.0], [54.0, 9870.0], [54.1, 9872.0], [54.2, 9877.0], [54.3, 9880.0], [54.4, 9886.0], [54.5, 9888.0], [54.6, 9892.0], [54.7, 9895.0], [54.8, 9897.0], [54.9, 9901.0], [55.0, 9904.0], [55.1, 9906.0], [55.2, 9910.0], [55.3, 9917.0], [55.4, 9920.0], [55.5, 9923.0], [55.6, 9927.0], [55.7, 9930.0], [55.8, 9933.0], [55.9, 9935.0], [56.0, 9939.0], [56.1, 9942.0], [56.2, 9946.0], [56.3, 9948.0], [56.4, 9949.0], [56.5, 9952.0], [56.6, 9957.0], [56.7, 9963.0], [56.8, 9965.0], [56.9, 9967.0], [57.0, 9969.0], [57.1, 9972.0], [57.2, 9974.0], [57.3, 9978.0], [57.4, 9981.0], [57.5, 9984.0], [57.6, 9987.0], [57.7, 9991.0], [57.8, 9996.0], [57.9, 10003.0], [58.0, 10008.0], [58.1, 10010.0], [58.2, 10017.0], [58.3, 10022.0], [58.4, 10027.0], [58.5, 10032.0], [58.6, 10036.0], [58.7, 10038.0], [58.8, 10040.0], [58.9, 10041.0], [59.0, 10044.0], [59.1, 10048.0], [59.2, 10050.0], [59.3, 10055.0], [59.4, 10057.0], [59.5, 10060.0], [59.6, 10062.0], [59.7, 10064.0], [59.8, 10066.0], [59.9, 10069.0], [60.0, 10071.0], [60.1, 10076.0], [60.2, 10081.0], [60.3, 10084.0], [60.4, 10088.0], [60.5, 10092.0], [60.6, 10097.0], [60.7, 10103.0], [60.8, 10108.0], [60.9, 10114.0], [61.0, 10123.0], [61.1, 10232.0], [61.2, 11676.0], [61.3, 11686.0], [61.4, 11696.0], [61.5, 11706.0], [61.6, 11726.0], [61.7, 11739.0], [61.8, 11754.0], [61.9, 11799.0], [62.0, 11813.0], [62.1, 11827.0], [62.2, 11849.0], [62.3, 11865.0], [62.4, 11876.0], [62.5, 11891.0], [62.6, 11900.0], [62.7, 11911.0], [62.8, 11930.0], [62.9, 11957.0], [63.0, 11975.0], [63.1, 11987.0], [63.2, 12000.0], [63.3, 12005.0], [63.4, 12015.0], [63.5, 12019.0], [63.6, 12023.0], [63.7, 12027.0], [63.8, 12031.0], [63.9, 12035.0], [64.0, 12045.0], [64.1, 12047.0], [64.2, 12050.0], [64.3, 12053.0], [64.4, 12057.0], [64.5, 12062.0], [64.6, 12064.0], [64.7, 12069.0], [64.8, 12073.0], [64.9, 12075.0], [65.0, 12077.0], [65.1, 12081.0], [65.2, 12084.0], [65.3, 12086.0], [65.4, 12090.0], [65.5, 12093.0], [65.6, 12097.0], [65.7, 12101.0], [65.8, 12103.0], [65.9, 12104.0], [66.0, 12108.0], [66.1, 12110.0], [66.2, 12113.0], [66.3, 12116.0], [66.4, 12120.0], [66.5, 12121.0], [66.6, 12123.0], [66.7, 12124.0], [66.8, 12126.0], [66.9, 12129.0], [67.0, 12132.0], [67.1, 12134.0], [67.2, 12137.0], [67.3, 12139.0], [67.4, 12143.0], [67.5, 12146.0], [67.6, 12148.0], [67.7, 12150.0], [67.8, 12152.0], [67.9, 12153.0], [68.0, 12156.0], [68.1, 12159.0], [68.2, 12161.0], [68.3, 12162.0], [68.4, 12163.0], [68.5, 12166.0], [68.6, 12170.0], [68.7, 12173.0], [68.8, 12177.0], [68.9, 12180.0], [69.0, 12182.0], [69.1, 12185.0], [69.2, 12190.0], [69.3, 12193.0], [69.4, 12194.0], [69.5, 12199.0], [69.6, 12201.0], [69.7, 12203.0], [69.8, 12205.0], [69.9, 12207.0], [70.0, 12208.0], [70.1, 12211.0], [70.2, 12214.0], [70.3, 12217.0], [70.4, 12221.0], [70.5, 12224.0], [70.6, 12227.0], [70.7, 12230.0], [70.8, 12233.0], [70.9, 12236.0], [71.0, 12239.0], [71.1, 12240.0], [71.2, 12243.0], [71.3, 12246.0], [71.4, 12249.0], [71.5, 12252.0], [71.6, 12255.0], [71.7, 12259.0], [71.8, 12261.0], [71.9, 12263.0], [72.0, 12267.0], [72.1, 12270.0], [72.2, 12273.0], [72.3, 12275.0], [72.4, 12278.0], [72.5, 12282.0], [72.6, 12285.0], [72.7, 12287.0], [72.8, 12290.0], [72.9, 12292.0], [73.0, 12295.0], [73.1, 12297.0], [73.2, 12301.0], [73.3, 12304.0], [73.4, 12306.0], [73.5, 12308.0], [73.6, 12310.0], [73.7, 12312.0], [73.8, 12314.0], [73.9, 12318.0], [74.0, 12320.0], [74.1, 12321.0], [74.2, 12324.0], [74.3, 12325.0], [74.4, 12328.0], [74.5, 12332.0], [74.6, 12334.0], [74.7, 12336.0], [74.8, 12337.0], [74.9, 12340.0], [75.0, 12342.0], [75.1, 12344.0], [75.2, 12346.0], [75.3, 12349.0], [75.4, 12351.0], [75.5, 12353.0], [75.6, 12356.0], [75.7, 12359.0], [75.8, 12363.0], [75.9, 12367.0], [76.0, 12370.0], [76.1, 12372.0], [76.2, 12375.0], [76.3, 12378.0], [76.4, 12380.0], [76.5, 12381.0], [76.6, 12383.0], [76.7, 12385.0], [76.8, 12387.0], [76.9, 12388.0], [77.0, 12390.0], [77.1, 12391.0], [77.2, 12393.0], [77.3, 12395.0], [77.4, 12396.0], [77.5, 12398.0], [77.6, 12400.0], [77.7, 12402.0], [77.8, 12404.0], [77.9, 12407.0], [78.0, 12409.0], [78.1, 12412.0], [78.2, 12413.0], [78.3, 12416.0], [78.4, 12417.0], [78.5, 12421.0], [78.6, 12422.0], [78.7, 12424.0], [78.8, 12427.0], [78.9, 12429.0], [79.0, 12431.0], [79.1, 12433.0], [79.2, 12434.0], [79.3, 12436.0], [79.4, 12439.0], [79.5, 12441.0], [79.6, 12443.0], [79.7, 12446.0], [79.8, 12447.0], [79.9, 12449.0], [80.0, 12450.0], [80.1, 12454.0], [80.2, 12455.0], [80.3, 12458.0], [80.4, 12459.0], [80.5, 12460.0], [80.6, 12462.0], [80.7, 12465.0], [80.8, 12467.0], [80.9, 12468.0], [81.0, 12471.0], [81.1, 12473.0], [81.2, 12473.0], [81.3, 12475.0], [81.4, 12480.0], [81.5, 12482.0], [81.6, 12484.0], [81.7, 12487.0], [81.8, 12489.0], [81.9, 12491.0], [82.0, 12492.0], [82.1, 12494.0], [82.2, 12497.0], [82.3, 12498.0], [82.4, 12499.0], [82.5, 12501.0], [82.6, 12503.0], [82.7, 12505.0], [82.8, 12507.0], [82.9, 12510.0], [83.0, 12511.0], [83.1, 12513.0], [83.2, 12514.0], [83.3, 12517.0], [83.4, 12519.0], [83.5, 12520.0], [83.6, 12522.0], [83.7, 12523.0], [83.8, 12524.0], [83.9, 12526.0], [84.0, 12528.0], [84.1, 12529.0], [84.2, 12530.0], [84.3, 12532.0], [84.4, 12533.0], [84.5, 12534.0], [84.6, 12535.0], [84.7, 12536.0], [84.8, 12538.0], [84.9, 12539.0], [85.0, 12540.0], [85.1, 12542.0], [85.2, 12543.0], [85.3, 12544.0], [85.4, 12545.0], [85.5, 12547.0], [85.6, 12548.0], [85.7, 12550.0], [85.8, 12551.0], [85.9, 12552.0], [86.0, 12554.0], [86.1, 12555.0], [86.2, 12556.0], [86.3, 12558.0], [86.4, 12559.0], [86.5, 12561.0], [86.6, 12562.0], [86.7, 12564.0], [86.8, 12566.0], [86.9, 12567.0], [87.0, 12569.0], [87.1, 12570.0], [87.2, 12572.0], [87.3, 12574.0], [87.4, 12575.0], [87.5, 12577.0], [87.6, 12578.0], [87.7, 12580.0], [87.8, 12582.0], [87.9, 12584.0], [88.0, 12584.0], [88.1, 12586.0], [88.2, 12588.0], [88.3, 12589.0], [88.4, 12590.0], [88.5, 12591.0], [88.6, 12592.0], [88.7, 12594.0], [88.8, 12596.0], [88.9, 12598.0], [89.0, 12599.0], [89.1, 12601.0], [89.2, 12603.0], [89.3, 12605.0], [89.4, 12607.0], [89.5, 12608.0], [89.6, 12610.0], [89.7, 12611.0], [89.8, 12612.0], [89.9, 12615.0], [90.0, 12617.0], [90.1, 12618.0], [90.2, 12620.0], [90.3, 12621.0], [90.4, 12622.0], [90.5, 12625.0], [90.6, 12626.0], [90.7, 12628.0], [90.8, 12631.0], [90.9, 12633.0], [91.0, 12636.0], [91.1, 12637.0], [91.2, 12639.0], [91.3, 12641.0], [91.4, 12643.0], [91.5, 12646.0], [91.6, 12648.0], [91.7, 12650.0], [91.8, 12651.0], [91.9, 12653.0], [92.0, 12656.0], [92.1, 12658.0], [92.2, 12659.0], [92.3, 12663.0], [92.4, 12665.0], [92.5, 12667.0], [92.6, 12669.0], [92.7, 12672.0], [92.8, 12677.0], [92.9, 12681.0], [93.0, 12683.0], [93.1, 12686.0], [93.2, 12688.0], [93.3, 12692.0], [93.4, 12693.0], [93.5, 12695.0], [93.6, 12696.0], [93.7, 12699.0], [93.8, 12702.0], [93.9, 12704.0], [94.0, 12706.0], [94.1, 12709.0], [94.2, 12711.0], [94.3, 12713.0], [94.4, 12716.0], [94.5, 12717.0], [94.6, 12720.0], [94.7, 12722.0], [94.8, 12724.0], [94.9, 12725.0], [95.0, 12728.0], [95.1, 12731.0], [95.2, 12734.0], [95.3, 12738.0], [95.4, 12742.0], [95.5, 12745.0], [95.6, 12748.0], [95.7, 12751.0], [95.8, 12755.0], [95.9, 12758.0], [96.0, 12761.0], [96.1, 12766.0], [96.2, 12769.0], [96.3, 12772.0], [96.4, 12776.0], [96.5, 12781.0], [96.6, 12786.0], [96.7, 12790.0], [96.8, 12794.0], [96.9, 12799.0], [97.0, 12802.0], [97.1, 12805.0], [97.2, 12812.0], [97.3, 12816.0], [97.4, 12830.0], [97.5, 12839.0], [97.6, 12849.0], [97.7, 12857.0], [97.8, 12866.0], [97.9, 12876.0], [98.0, 12882.0], [98.1, 12888.0], [98.2, 12895.0], [98.3, 12902.0], [98.4, 12906.0], [98.5, 12915.0], [98.6, 12918.0], [98.7, 12924.0], [98.8, 12928.0], [98.9, 12941.0], [99.0, 12951.0], [99.1, 12968.0], [99.2, 12981.0], [99.3, 12992.0], [99.4, 12998.0], [99.5, 13008.0], [99.6, 13025.0], [99.7, 13053.0], [99.8, 13073.0], [99.9, 13133.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1400.0, "maxY": 591.0, "series": [{"data": [[1400.0, 18.0], [1500.0, 58.0], [1600.0, 74.0], [1700.0, 80.0], [1800.0, 82.0], [1900.0, 92.0], [2000.0, 91.0], [2100.0, 138.0], [2200.0, 160.0], [2300.0, 68.0], [2400.0, 51.0], [2500.0, 47.0], [2600.0, 23.0], [2700.0, 6.0], [2800.0, 7.0], [2900.0, 1.0], [3000.0, 2.0], [3100.0, 26.0], [3300.0, 44.0], [3200.0, 38.0], [3400.0, 104.0], [3500.0, 99.0], [3600.0, 99.0], [3700.0, 233.0], [3800.0, 108.0], [3900.0, 53.0], [4000.0, 72.0], [4100.0, 125.0], [7400.0, 4.0], [7600.0, 14.0], [7500.0, 4.0], [7800.0, 10.0], [7900.0, 10.0], [7700.0, 20.0], [8100.0, 16.0], [8000.0, 3.0], [8300.0, 51.0], [8400.0, 15.0], [8200.0, 10.0], [8500.0, 19.0], [8600.0, 19.0], [8700.0, 36.0], [8800.0, 69.0], [9000.0, 202.0], [9100.0, 220.0], [9200.0, 227.0], [8900.0, 142.0], [9300.0, 205.0], [9400.0, 183.0], [9500.0, 284.0], [9600.0, 336.0], [9700.0, 494.0], [9800.0, 347.0], [9900.0, 267.0], [10000.0, 251.0], [10100.0, 41.0], [10200.0, 1.0], [11700.0, 42.0], [11600.0, 30.0], [12200.0, 327.0], [12000.0, 223.0], [12100.0, 348.0], [11800.0, 61.0], [11900.0, 55.0], [12300.0, 396.0], [12400.0, 439.0], [12500.0, 591.0], [12600.0, 422.0], [12700.0, 291.0], [12800.0, 120.0], [12900.0, 104.0], [13000.0, 37.0], [13100.0, 13.0], [21300.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 18.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 8595.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 18.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 386.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 8595.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 251.99199999999988, "minX": 1.73053386E12, "maxY": 1870.4702857142843, "series": [{"data": [[1.73291574E12, 251.99199999999988], [1.73053758E12, 481.6300000000002], [1.73053728E12, 1870.4702857142843], [1.73053386E12, 1791.0637324950083], [1.73053782E12, 500.0], [1.73291514E12, 407.17999999999995]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73291574E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1659.0, "minX": 1.0, "maxY": 13028.5, "series": [{"data": [[2.0, 8158.5], [3.0, 6886.0], [4.0, 8014.25], [5.0, 3828.5], [6.0, 8641.0], [7.0, 3544.0], [8.0, 7286.0], [9.0, 3236.5], [10.0, 6164.5], [11.0, 3230.0], [12.0, 9835.111111111111], [13.0, 3515.0], [14.0, 3154.0], [15.0, 9929.666666666666], [17.0, 3675.6666666666665], [18.0, 2673.75], [19.0, 5779.25], [20.0, 2269.0], [21.0, 7958.5], [22.0, 2817.0], [23.0, 3544.4], [24.0, 10936.8], [25.0, 10002.0], [26.0, 1985.0], [27.0, 2526.0], [28.0, 2498.0], [29.0, 2240.0], [30.0, 7328.5], [33.0, 2305.0], [32.0, 1967.0], [34.0, 3460.0], [35.0, 2121.0], [36.0, 6863.333333333333], [39.0, 11962.900000000001], [38.0, 2320.6666666666665], [40.0, 7712.0], [41.0, 2918.0], [42.0, 6098.142857142857], [43.0, 2701.0], [45.0, 12974.0], [47.0, 12946.25], [46.0, 2261.6666666666665], [49.0, 10035.0], [51.0, 9967.0], [50.0, 9386.0], [53.0, 10754.2], [52.0, 13028.5], [54.0, 10122.0], [56.0, 9804.75], [57.0, 2466.3], [59.0, 2412.5], [60.0, 8606.666666666666], [61.0, 2353.0], [63.0, 13021.0], [66.0, 4007.0], [67.0, 2572.0], [69.0, 10424.666666666666], [68.0, 12895.0], [71.0, 3606.4], [70.0, 3132.0], [74.0, 12926.5], [75.0, 2666.0], [73.0, 2349.0], [72.0, 1897.0], [76.0, 7490.0], [79.0, 12999.0], [77.0, 2152.0], [83.0, 12994.0], [82.0, 12955.0], [81.0, 12951.666666666666], [80.0, 12917.0], [84.0, 4621.0], [87.0, 2260.0], [86.0, 2027.0], [85.0, 2283.25], [90.0, 11765.888888888889], [91.0, 1919.0], [89.0, 2398.0], [88.0, 2642.0], [92.0, 9395.25], [95.0, 9554.520000000004], [94.0, 8953.999999999998], [93.0, 10092.5], [99.0, 10763.5], [98.0, 7712.0], [97.0, 8645.375], [96.0, 9934.25], [101.0, 12866.0], [100.0, 7797.5], [103.0, 7789.0], [102.0, 4489.0], [106.0, 12773.0], [107.0, 2480.5], [105.0, 2232.5], [111.0, 10183.0], [108.0, 11345.428571428572], [109.0, 3676.875], [110.0, 2332.0], [115.0, 7596.0], [114.0, 7650.75], [112.0, 7692.5], [119.0, 2158.0], [118.0, 2128.0], [117.0, 2624.0], [116.0, 1899.0], [122.0, 9299.333333333334], [120.0, 12858.6], [123.0, 2264.0], [121.0, 2385.5], [126.0, 12880.75], [124.0, 2617.0], [135.0, 7552.5], [130.0, 9375.5], [132.0, 3481.5], [134.0, 1834.0], [133.0, 2531.0], [131.0, 2018.0], [128.0, 2148.25], [136.0, 10785.8], [143.0, 2409.0], [142.0, 2443.0], [141.0, 2601.3333333333335], [138.0, 2217.5], [150.0, 7771.0], [149.0, 9311.333333333334], [151.0, 2008.0], [148.0, 2044.25], [144.0, 2486.0], [159.0, 5291.857142857143], [158.0, 12926.0], [156.0, 12905.0], [154.0, 5845.333333333333], [152.0, 2326.0], [165.0, 7697.5], [166.0, 3657.25], [164.0, 2579.0], [163.0, 1788.0], [162.0, 2125.0], [161.0, 2099.0], [160.0, 1930.0], [174.0, 9820.333333333334], [172.0, 12012.359999999999], [171.0, 8077.5], [170.0, 10073.25], [169.0, 2998.0], [173.0, 2574.0], [168.0, 2411.6666666666665], [182.0, 9987.8], [181.0, 9849.0], [179.0, 9731.0], [178.0, 9529.5], [177.0, 6690.0], [180.0, 3685.0], [183.0, 2365.1], [191.0, 12710.0], [189.0, 6380.874999999999], [186.0, 12898.0], [185.0, 11291.538461538461], [190.0, 2226.0], [197.0, 12861.833333333332], [192.0, 12772.0], [199.0, 2555.0], [196.0, 2556.0], [193.0, 2149.6666666666665], [203.0, 12730.0], [201.0, 6923.888888888888], [206.0, 8141.222222222223], [202.0, 6303.0], [200.0, 5654.0], [204.0, 2555.6666666666665], [207.0, 2120.0], [215.0, 7554.5], [214.0, 7370.0], [211.0, 10649.444444444445], [212.0, 7318.333333333334], [209.0, 7315.833333333333], [213.0, 3457.125], [210.0, 2850.0], [221.0, 11374.5], [222.0, 7902.624999999999], [220.0, 7777.857142857144], [218.0, 8379.5], [217.0, 6246.0], [216.0, 1918.0], [230.0, 12356.0], [229.0, 12500.25], [226.0, 7238.75], [224.0, 5787.666666666667], [231.0, 9564.0], [227.0, 2498.0], [238.0, 10410.0], [239.0, 7370.0], [235.0, 4226.400000000001], [233.0, 12906.0], [236.0, 2517.0], [246.0, 7609.0], [245.0, 9396.333333333334], [243.0, 9300.0], [242.0, 7470.5], [244.0, 1897.0], [240.0, 1927.0], [253.0, 8780.823529411764], [252.0, 7184.5], [251.0, 7383.090909090908], [254.0, 1815.0], [248.0, 2318.0], [258.0, 9283.916666666666], [270.0, 10533.5], [268.0, 10840.5], [259.0, 9070.166666666668], [269.0, 9701.4], [266.0, 10637.0], [267.0, 2153.5], [265.0, 8814.0], [264.0, 5234.2], [271.0, 6062.75], [263.0, 9036.6], [262.0, 8253.166666666666], [261.0, 9529.0], [260.0, 2495.0], [257.0, 11371.5], [256.0, 8501.142857142857], [284.0, 10711.571428571431], [282.0, 7649.5], [283.0, 8022.666666666666], [280.0, 12875.0], [276.0, 10080.000000000002], [279.0, 7151.0], [272.0, 7936.0], [278.0, 5925.75], [274.0, 12524.0], [275.0, 4825.333333333333], [273.0, 12724.0], [285.0, 5973.5], [287.0, 2469.0], [286.0, 2466.0], [281.0, 7902.375], [288.0, 12358.0], [297.0, 7518.5], [296.0, 8468.142857142857], [295.0, 10318.857142857143], [302.0, 7161.909090909091], [303.0, 2790.3333333333335], [290.0, 9661.0], [289.0, 1976.0], [300.0, 2173.0], [291.0, 2387.5], [301.0, 3522.8], [298.0, 5345.2], [294.0, 5528.5], [292.0, 7081.5], [293.0, 4772.333333333333], [307.0, 9467.454545454544], [315.0, 6437.25], [314.0, 8291.333333333334], [311.0, 8050.857142857143], [309.0, 8198.454545454546], [308.0, 7199.846153846154], [310.0, 9763.5], [304.0, 5135.666666666667], [305.0, 6340.75], [306.0, 1718.0], [319.0, 6469.0], [317.0, 9570.0], [318.0, 2119.3333333333335], [313.0, 10064.0], [312.0, 8939.0], [333.0, 11723.333333333332], [328.0, 11911.57142857143], [329.0, 12757.0], [323.0, 10270.666666666668], [322.0, 12616.666666666666], [321.0, 8846.0], [320.0, 7374.5], [327.0, 1744.0], [326.0, 2282.5], [324.0, 1804.0], [335.0, 9724.333333333334], [334.0, 1930.0], [330.0, 7562.714285714285], [331.0, 1898.0], [332.0, 6022.5], [348.0, 8506.049999999997], [345.0, 9106.5], [347.0, 3440.9375], [342.0, 9892.5], [343.0, 7184.666666666666], [338.0, 7148.0], [339.0, 2418.0], [337.0, 8704.333333333334], [336.0, 4134.75], [341.0, 9161.250000000002], [340.0, 8134.666666666666], [351.0, 9462.0], [350.0, 7526.333333333334], [349.0, 7517.0], [344.0, 7271.333333333334], [367.0, 7532.0], [366.0, 10486.0], [361.0, 12676.555555555557], [352.0, 9073.857142857143], [358.0, 2395.0], [357.0, 1714.0], [356.0, 2031.0], [365.0, 6200.0], [353.0, 9260.071428571428], [355.0, 1659.0], [354.0, 2036.0], [363.0, 2186.0], [362.0, 2255.5], [360.0, 2403.0], [382.0, 9479.25], [373.0, 11584.2], [372.0, 7790.5], [375.0, 10027.0], [369.0, 1964.0], [368.0, 2368.0], [374.0, 1777.5], [370.0, 9988.636363636362], [383.0, 4818.0], [381.0, 7326.333333333334], [380.0, 5516.857142857143], [371.0, 1712.0], [379.0, 9526.0], [377.0, 10015.0], [376.0, 4721.666666666667], [387.0, 9783.5], [390.0, 10643.25], [391.0, 2210.0], [385.0, 12213.199999999999], [392.0, 9045.27272727273], [393.0, 2243.0], [395.0, 2217.0], [394.0, 2368.0], [389.0, 4482.666666666667], [386.0, 10010.0], [399.0, 2361.0], [398.0, 2358.0], [397.0, 1846.0], [396.0, 1741.0], [401.0, 5535.0], [414.0, 12784.0], [413.0, 2257.5], [402.0, 1981.0], [411.0, 11908.416666666668], [410.0, 8471.0], [406.0, 12721.0], [405.0, 10684.6], [404.0, 1990.0], [407.0, 5748.333333333333], [408.0, 3068.5], [415.0, 2025.0], [419.0, 4640.8], [431.0, 7283.2], [429.0, 12711.25], [428.0, 3113.0], [430.0, 3204.0], [425.0, 7034.666666666667], [424.0, 6688.666666666667], [423.0, 8158.0], [422.0, 12690.666666666666], [421.0, 4100.0], [420.0, 4142.0], [417.0, 12887.0], [418.0, 3485.0], [416.0, 9738.666666666666], [447.0, 7741.874999999999], [434.0, 2961.5882352941176], [436.0, 7744.833333333333], [437.0, 1708.0], [432.0, 6087.25], [439.0, 2097.0], [446.0, 3814.6666666666665], [441.0, 3929.5], [443.0, 3651.0], [442.0, 2221.0], [440.0, 3682.6250000000005], [445.0, 3417.0], [444.0, 2570.6666666666665], [460.0, 6768.8], [462.0, 7625.0], [463.0, 12190.0], [461.0, 5730.75], [450.0, 9513.266666666665], [449.0, 3709.0], [458.0, 8259.8], [457.0, 4508.090909090909], [453.0, 5944.333333333333], [452.0, 1931.6666666666667], [454.0, 2897.8], [476.0, 10691.083333333334], [475.0, 9339.666666666666], [474.0, 6035.199999999999], [472.0, 7695.5], [479.0, 4117.0], [478.0, 3480.0], [477.0, 2430.4], [471.0, 6941.2], [465.0, 6964.857142857142], [464.0, 5324.142857142858], [470.0, 9127.0], [468.0, 9736.4], [469.0, 2117.0], [467.0, 3358.4166666666665], [466.0, 9703.0], [493.0, 12083.833333333334], [495.0, 11915.5], [492.0, 12708.5], [491.0, 9685.666666666666], [490.0, 3571.5], [489.0, 9888.0], [494.0, 10040.0], [484.0, 8585.0], [486.0, 4138.0], [480.0, 3894.0], [483.0, 9168.0], [482.0, 7274.6], [481.0, 10071.5], [510.0, 10053.5], [496.0, 9756.25], [501.0, 10943.6], [500.0, 2978.9234449760747], [503.0, 9341.5], [499.0, 6635.714285714286], [498.0, 8316.25], [497.0, 7962.09090909091], [511.0, 9350.0], [504.0, 10048.0], [509.0, 9764.0], [507.0, 10038.0], [508.0, 10104.0], [506.0, 9857.0], [518.0, 10906.727272727272], [538.0, 11883.875], [536.0, 12157.833333333332], [534.0, 12743.5], [522.0, 12718.0], [528.0, 9842.0], [524.0, 9646.875], [516.0, 9684.0], [514.0, 9944.25], [512.0, 9998.0], [570.0, 11622.0], [568.0, 12657.5], [564.0, 12657.875], [554.0, 12545.666666666666], [546.0, 11096.75], [560.0, 9805.4], [556.0, 10027.333333333334], [550.0, 9207.0], [548.0, 9752.666666666666], [606.0, 10121.64705882353], [602.0, 12261.0], [598.0, 12155.0], [580.0, 12184.5], [576.0, 12350.0], [588.0, 9995.0], [586.0, 9837.111111111111], [582.0, 10091.0], [632.0, 12621.0], [636.0, 12431.25], [614.0, 12175.0], [612.0, 12212.0], [622.0, 12657.8], [620.0, 12179.0], [626.0, 12597.25], [628.0, 9930.0], [624.0, 12199.0], [670.0, 12567.384615384617], [668.0, 12711.0], [666.0, 12668.25], [656.0, 11052.166666666668], [644.0, 12203.5], [642.0, 12158.166666666668], [658.0, 9445.8], [700.0, 12712.0], [692.0, 12775.0], [734.0, 12515.0], [732.0, 12566.0], [720.0, 12762.0], [722.0, 12649.0], [730.0, 12350.0], [716.0, 9787.4], [706.0, 9394.0], [704.0, 10004.0], [714.0, 9939.0], [726.0, 12660.75], [724.0, 12753.0], [764.0, 12204.0], [766.0, 10611.0], [762.0, 10867.5], [760.0, 9769.0], [742.0, 9733.0], [738.0, 12453.666666666666], [740.0, 12652.75], [748.0, 12530.25], [744.0, 12723.0], [758.0, 12120.0], [756.0, 10536.333333333334], [754.0, 10408.5], [752.0, 9940.0], [798.0, 12161.0], [794.0, 12173.0], [788.0, 12195.666666666666], [784.0, 12413.428571428572], [780.0, 12211.0], [790.0, 9495.666666666666], [778.0, 9949.0], [828.0, 12738.0], [830.0, 12507.5], [826.0, 12766.0], [804.0, 12766.0], [812.0, 12642.0], [810.0, 12719.0], [808.0, 12506.75], [820.0, 12517.75], [858.0, 12645.0], [862.0, 12175.0], [856.0, 12608.8], [838.0, 9985.5], [836.0, 9447.0], [834.0, 9719.0], [832.0, 9723.666666666666], [854.0, 12180.75], [852.0, 9372.25], [850.0, 9683.5], [848.0, 10767.4], [846.0, 10861.25], [842.0, 10386.25], [840.0, 9643.5], [844.0, 9253.5], [892.0, 12563.5], [894.0, 12492.0], [864.0, 12702.0], [882.0, 12504.0], [880.0, 12170.0], [878.0, 12174.0], [872.0, 12459.333333333334], [902.0, 12657.5], [926.0, 12170.5], [924.0, 9936.0], [922.0, 9576.8], [920.0, 9959.0], [900.0, 12745.0], [898.0, 12377.5], [916.0, 12195.0], [918.0, 9825.666666666666], [914.0, 9936.125], [912.0, 10372.57142857143], [910.0, 12177.0], [904.0, 10586.333333333334], [958.0, 9666.666666666666], [946.0, 12073.0], [938.0, 11996.5], [932.0, 12111.166666666668], [950.0, 9652.555555555557], [944.0, 9979.0], [936.0, 9707.0], [934.0, 9625.4], [956.0, 9985.0], [984.0, 9737.25], [988.0, 11030.5], [982.0, 12450.444444444445], [978.0, 12748.0], [962.0, 12749.0], [960.0, 9672.333333333334], [986.0, 9559.0], [974.0, 9788.0], [970.0, 9802.5], [964.0, 9693.25], [966.0, 9261.0], [998.0, 11351.0], [1008.0, 11662.0], [1014.0, 12688.142857142857], [1012.0, 9416.166666666666], [1010.0, 9620.0], [1006.0, 11303.5], [992.0, 11878.9], [996.0, 12125.0], [994.0, 9781.2], [1004.0, 10112.5], [1002.0, 9569.333333333334], [1000.0, 9622.428571428572], [1020.0, 9722.0], [1018.0, 9879.2], [1016.0, 9642.5], [1076.0, 12663.0], [1084.0, 12453.0], [1080.0, 9808.75], [1032.0, 12589.0], [1024.0, 9654.5], [1064.0, 10941.75], [1060.0, 12686.25], [1056.0, 12742.0], [1052.0, 12716.0], [1044.0, 12659.666666666666], [1048.0, 9803.75], [1148.0, 12569.0], [1120.0, 12541.333333333334], [1108.0, 12538.0], [1104.0, 12571.8], [1100.0, 12616.476190476193], [1092.0, 12557.5], [1112.0, 9601.8], [1164.0, 12623.0], [1188.0, 12106.0], [1200.0, 12242.0], [1208.0, 9878.0], [1192.0, 12082.0], [1172.0, 12598.4], [1156.0, 12547.0], [1160.0, 12406.5], [1168.0, 12541.0], [1244.0, 12571.0], [1276.0, 12444.0], [1220.0, 12121.0], [1240.0, 12665.0], [1232.0, 12205.5], [1336.0, 12606.75], [1340.0, 12540.0], [1320.0, 12575.333333333334], [1324.0, 12562.0], [1328.0, 12611.0], [1284.0, 12092.0], [1308.0, 12549.0], [1300.0, 10139.5], [1296.0, 9692.0], [1400.0, 12098.4], [1404.0, 12090.0], [1396.0, 12427.0], [1348.0, 12107.9], [1344.0, 12541.4], [1388.0, 12442.0], [1372.0, 9537.666666666666], [1352.0, 9683.0], [1456.0, 12561.142857142857], [1448.0, 12400.75], [1420.0, 12535.0], [1432.0, 12470.000000000002], [1424.0, 12693.0], [1468.0, 9892.0], [1464.0, 9523.5], [1444.0, 9894.0], [1412.0, 9880.5], [1476.0, 12133.0], [1532.0, 12371.5], [1524.0, 12268.5], [1504.0, 12082.0], [1472.0, 12349.0], [1492.0, 11309.8], [1496.0, 9868.0], [1500.0, 9621.923076923078], [1512.0, 12044.0], [1568.0, 12530.0], [1576.0, 12491.0], [1560.0, 12663.0], [1608.0, 10410.333333333334], [1612.0, 12266.333333333334], [1600.0, 12625.5], [1624.0, 12659.0], [1620.0, 12551.666666666666], [1660.0, 9532.75], [1640.0, 9595.5], [1720.0, 12377.5], [1712.0, 12485.499999999998], [1668.0, 12503.0], [1688.0, 12650.0], [1680.0, 12382.0], [1724.0, 9748.0], [1664.0, 9576.875], [1764.0, 12460.0], [1780.0, 12389.0], [1768.0, 12496.0], [1776.0, 12643.5], [1748.0, 12654.5], [1728.0, 10949.0], [1736.0, 9782.199999999999], [1772.0, 12599.0], [1852.0, 12360.333333333334], [1832.0, 10157.666666666666], [1848.0, 12549.5], [1812.0, 12434.125], [1820.0, 9818.0], [1816.0, 9599.0], [1808.0, 9834.166666666666], [1912.0, 9359.5], [1896.0, 10909.5], [1888.0, 9433.666666666666], [1916.0, 12425.0], [1904.0, 9937.42857142857], [1868.0, 9187.666666666666], [1860.0, 12500.0], [1856.0, 12588.25], [1880.0, 9878.0], [1884.0, 9205.0], [1876.0, 11451.875], [1872.0, 10507.333333333334], [1900.0, 9989.749999999998], [1972.0, 9655.41666666667], [1968.0, 10273.0], [1952.0, 9719.0], [1980.0, 12339.0], [1976.0, 9512.179487179486], [1920.0, 12453.75], [1932.0, 10128.2], [1928.0, 9376.0], [1924.0, 9780.0], [1944.0, 9474.25], [1960.0, 10213.666666666666], [2036.0, 11245.42857142857], [2016.0, 10976.25], [2040.0, 9727.5], [2044.0, 9446.75], [2020.0, 12001.0], [2024.0, 11169.0], [1984.0, 12454.0], [2012.0, 9571.106382978725], [1992.0, 10988.0], [2032.0, 9543.0], [2008.0, 12032.0], [2000.0, 12471.666666666668], [2072.0, 12251.0], [2160.0, 12266.0], [2112.0, 12416.333333333334], [2144.0, 12017.0], [2048.0, 12491.5], [2096.0, 12524.0], [2088.0, 12391.0], [2080.0, 12548.0], [2192.0, 9734.0], [2272.0, 9449.5], [2176.0, 12434.857142857143], [2224.0, 9764.0], [2216.0, 12592.0], [2208.0, 10736.6], [2264.0, 10402.8], [2424.0, 12530.0], [2368.0, 12434.25], [2376.0, 12530.0], [2384.0, 11018.25], [2392.0, 9522.5], [2400.0, 9438.5], [2408.0, 9526.333333333334], [2328.0, 12260.666666666666], [2320.0, 9322.0], [2312.0, 12572.5], [2360.0, 12323.0], [2344.0, 9499.0], [2336.0, 12488.0], [2536.0, 12514.0], [2552.0, 9239.0], [2504.0, 12594.0], [2512.0, 12540.0], [2520.0, 12374.5], [2528.0, 10431.5], [2432.0, 12446.0], [2448.0, 12465.0], [2456.0, 12434.0], [2488.0, 10524.666666666666], [2464.0, 12516.25], [2568.0, 9371.5], [2624.0, 9499.477941176467], [2680.0, 12521.0], [2576.0, 11000.5], [2560.0, 9533.25], [2616.0, 9459.111111111111], [2600.0, 9551.0], [2592.0, 9465.25], [2608.0, 9377.8], [2704.0, 12526.0], [2808.0, 10791.125], [2768.0, 12228.0], [2752.0, 9272.0], [2696.0, 12245.333333333334], [2712.0, 12283.5], [2792.0, 9490.0], [2728.0, 11367.857142857143], [2720.0, 12363.0], [2736.0, 9345.8], [2744.0, 9635.0], [2880.0, 12378.0], [2896.0, 9377.5], [2928.0, 9527.666666666666], [2920.0, 11106.666666666666], [2840.0, 10421.363636363634], [2824.0, 11815.0], [2960.0, 10158.75], [3024.0, 12206.0], [3016.0, 9038.0], [3032.0, 12282.0], [2952.0, 10969.0], [2944.0, 12302.666666666664], [2992.0, 12274.3], [2984.0, 12393.0], [2976.0, 10739.333333333334], [3096.0, 9347.5], [3192.0, 8894.666666666666], [3136.0, 8918.5], [3128.0, 9555.0], [3088.0, 9333.0], [3296.0, 9065.624999999998], [3320.0, 9183.0], [3208.0, 11795.0], [3248.0, 11823.0], [3240.0, 8918.0], [3256.0, 9447.5], [3224.0, 9152.333333333334], [3288.0, 9022.333333333334], [3272.0, 8756.0], [3264.0, 8694.0], [3352.0, 7704.0], [3336.0, 9825.333333333334], [3328.0, 8861.0], [3424.0, 7773.0], [3360.0, 8561.0], [3344.0, 8696.0], [2065.0, 10314.0], [2169.0, 12002.0], [2161.0, 12583.5], [2145.0, 11968.0], [2049.0, 11549.333333333334], [2057.0, 12013.0], [2105.0, 12482.5], [2097.0, 12463.666666666666], [2241.0, 12453.0], [2185.0, 12596.0], [2257.0, 9339.666666666666], [2177.0, 12547.0], [2225.0, 9336.666666666666], [2217.0, 9305.0], [2273.0, 9528.0], [2417.0, 12388.0], [2425.0, 12491.5], [2369.0, 9789.0], [2377.0, 12563.333333333334], [2385.0, 12484.75], [2393.0, 10218.0], [2409.0, 10476.166666666668], [2401.0, 9765.0], [2329.0, 12328.5], [2321.0, 12405.5], [2313.0, 9548.25], [2305.0, 11509.666666666666], [2361.0, 12425.666666666666], [2353.0, 12319.0], [2345.0, 9273.25], [2441.0, 12542.2], [2553.0, 9869.0], [2545.0, 9543.0], [2497.0, 12394.666666666666], [2505.0, 12138.0], [2433.0, 12545.0], [2449.0, 12544.5], [2457.0, 12412.0], [2489.0, 12459.5], [2473.0, 12522.5], [2465.0, 12341.0], [2569.0, 9229.666666666666], [2577.0, 12426.0], [2561.0, 10589.333333333334], [2617.0, 9024.0], [2609.0, 10864.5], [2601.0, 11975.0], [2593.0, 9642.0], [2793.0, 9128.0], [2809.0, 11059.038461538463], [2745.0, 9480.333333333334], [2689.0, 9377.0], [2713.0, 12430.0], [2769.0, 9250.666666666666], [2761.0, 9378.0], [2753.0, 9683.0], [2777.0, 9373.545454545454], [2937.0, 12253.0], [2921.0, 9103.0], [2889.0, 9199.0], [2929.0, 11217.75], [2841.0, 9307.8], [3041.0, 12306.5], [3065.0, 10810.92857142857], [3049.0, 12172.333333333334], [3009.0, 12155.0], [3017.0, 9304.5], [3025.0, 12222.75], [2969.0, 12278.0], [2961.0, 12294.0], [2953.0, 9250.5], [2945.0, 9068.0], [2985.0, 12424.0], [2977.0, 9646.0], [3081.0, 9396.0], [3185.0, 8916.333333333334], [3113.0, 9236.6], [3105.0, 9368.0], [3177.0, 8942.0], [3153.0, 9524.0], [3137.0, 9340.0], [3313.0, 12219.0], [3257.0, 10456.5], [3265.0, 9184.0], [3305.0, 8561.0], [3273.0, 9349.0], [3353.0, 8377.0], [3345.0, 7975.0], [3337.0, 8836.0], [3329.0, 9097.0], [1033.0, 12248.0], [1085.0, 12311.0], [1073.0, 12474.0], [1069.0, 12618.8], [1061.0, 12688.0], [1053.0, 12572.0], [1077.0, 9928.0], [1065.0, 9684.866666666669], [1049.0, 9658.0], [1045.0, 9318.0], [1041.0, 9685.0], [1149.0, 12623.666666666666], [1141.0, 12511.5], [1137.0, 12662.333333333334], [1089.0, 11140.0], [1109.0, 12588.666666666666], [1121.0, 12529.0], [1153.0, 12147.0], [1161.0, 12435.0], [1193.0, 12102.5], [1209.0, 9115.0], [1269.0, 12301.285714285714], [1257.0, 12081.0], [1277.0, 12567.0], [1217.0, 12512.0], [1221.0, 12600.5], [1233.0, 12608.5], [1265.0, 9344.0], [1293.0, 11657.333333333334], [1341.0, 12436.666666666666], [1317.0, 12677.5], [1333.0, 12603.5], [1289.0, 12152.0], [1281.0, 12084.0], [1309.0, 12608.0], [1297.0, 12523.0], [1405.0, 12143.0], [1401.0, 10898.5], [1353.0, 9397.0], [1349.0, 9705.0], [1377.0, 12428.888888888889], [1381.0, 12515.0], [1385.0, 12610.0], [1345.0, 12344.214285714284], [1373.0, 12114.0], [1369.0, 12127.0], [1365.0, 10784.0], [1465.0, 9503.0], [1461.0, 9813.5], [1453.0, 9768.5], [1449.0, 9577.666666666666], [1441.0, 9792.0], [1421.0, 9358.333333333334], [1413.0, 9870.0], [1525.0, 12035.0], [1533.0, 12422.0], [1505.0, 12063.5], [1477.0, 9611.299999999996], [1513.0, 12104.0], [1497.0, 9878.0], [1493.0, 9864.0], [1473.0, 9524.333333333334], [1593.0, 12385.5], [1569.0, 12487.5], [1573.0, 12390.0], [1577.0, 12452.0], [1597.0, 12210.0], [1589.0, 12389.0], [1585.0, 12397.6], [1545.0, 12416.0], [1565.0, 12687.0], [1561.0, 12422.0], [1553.0, 12222.0], [1581.0, 12633.0], [1653.0, 12476.25], [1649.0, 12470.0], [1613.0, 9388.0], [1609.0, 9492.0], [1661.0, 11750.6], [1601.0, 12289.857142857143], [1633.0, 12539.0], [1645.0, 9501.111111111111], [1641.0, 9453.0], [1629.0, 12573.6], [1625.0, 12366.75], [1717.0, 12259.0], [1677.0, 10010.857142857143], [1673.0, 12560.0], [1685.0, 12605.0], [1681.0, 12464.666666666666], [1665.0, 9334.0], [1741.0, 12379.23076923077], [1781.0, 12496.25], [1761.0, 12404.0], [1777.0, 12465.0], [1757.0, 12199.0], [1753.0, 12264.5], [1745.0, 12618.0], [1737.0, 12500.0], [1729.0, 9587.5], [1773.0, 12598.0], [1841.0, 12598.0], [1793.0, 12443.0], [1825.0, 9736.333333333334], [1905.0, 12481.0], [1889.0, 12566.0], [1893.0, 12030.0], [1913.0, 12567.0], [1877.0, 9720.866666666667], [1873.0, 9717.0], [1885.0, 9177.5], [1881.0, 9844.0], [1901.0, 9413.5], [1897.0, 9054.0], [1929.0, 12194.2], [1973.0, 10970.5], [1981.0, 11867.75], [1953.0, 9364.5], [1957.0, 12373.0], [1945.0, 10515.333333333334], [1949.0, 9825.0], [1921.0, 12518.5], [1925.0, 12481.0], [1933.0, 10080.92857142857], [1969.0, 9492.75], [1941.0, 12003.0], [1965.0, 10956.5], [2037.0, 12031.0], [2045.0, 12338.4], [2017.0, 12350.0], [2021.0, 9313.6], [2025.0, 11028.5], [2033.0, 9563.666666666666], [2041.0, 9711.5], [2013.0, 12588.75], [1985.0, 12477.5], [1989.0, 12483.0], [1997.0, 10098.0], [2009.0, 12545.0], [2005.0, 12530.142857142857], [2001.0, 12517.333333333334], [2029.0, 9622.0], [2154.0, 12024.0], [2170.0, 12527.333333333334], [2114.0, 12407.0], [2122.0, 12027.0], [2138.0, 12439.0], [2074.0, 12489.0], [2066.0, 9185.0], [2058.0, 9515.0], [2050.0, 11639.142857142859], [2098.0, 12442.0], [2082.0, 12577.0], [2194.0, 10539.777777777777], [2290.0, 12389.125], [2282.0, 12590.0], [2178.0, 12528.0], [2202.0, 9208.555555555555], [2234.0, 12483.0], [2226.0, 10227.142857142857], [2218.0, 9352.0], [2258.0, 9790.0], [2266.0, 9804.0], [2242.0, 10036.818181818182], [2418.0, 12441.5], [2378.0, 12329.5], [2386.0, 9042.0], [2394.0, 11536.5], [2402.0, 12439.0], [2322.0, 10486.666666666666], [2314.0, 9761.0], [2362.0, 9425.57142857143], [2354.0, 11225.2], [2338.0, 9478.666666666666], [2546.0, 9801.0], [2538.0, 12314.5], [2506.0, 12384.5], [2498.0, 12381.666666666666], [2514.0, 12537.0], [2554.0, 9775.0], [2442.0, 12390.0], [2450.0, 12597.0], [2474.0, 12520.0], [2466.0, 12493.0], [2570.0, 9015.0], [2650.0, 12399.8], [2626.0, 9395.916666666666], [2658.0, 9431.5], [2618.0, 11185.666666666666], [2610.0, 9078.0], [2602.0, 11915.0], [2594.0, 9691.0], [2802.0, 11878.5], [2754.0, 9441.333333333334], [2762.0, 11104.0], [2698.0, 12201.5], [2714.0, 12481.0], [2770.0, 9462.0], [2914.0, 9390.5], [2922.0, 8985.0], [2882.0, 12262.0], [2890.0, 9222.2], [2906.0, 12290.75], [2842.0, 9002.5], [2818.0, 11906.0], [2866.0, 9410.5], [2850.0, 9686.0], [2962.0, 12332.0], [3042.0, 12416.0], [3050.0, 12321.0], [2970.0, 12336.0], [2954.0, 9513.333333333334], [2946.0, 9666.0], [3002.0, 12140.0], [2986.0, 12116.0], [2978.0, 9265.0], [3178.0, 8967.0], [3130.0, 9174.5], [3098.0, 9583.5], [3082.0, 9032.0], [3226.0, 9048.0], [3322.0, 9012.5], [3314.0, 11775.0], [3306.0, 8426.0], [3258.0, 9109.0], [3218.0, 9247.181818181816], [3250.0, 9275.333333333334], [3234.0, 9276.0], [3274.0, 9332.0], [3266.0, 9439.0], [3354.0, 8603.0], [3346.0, 8580.0], [3338.0, 8835.0], [3330.0, 9034.0], [2147.0, 12003.0], [2171.0, 12568.5], [2123.0, 12535.0], [2139.0, 12616.0], [2051.0, 9964.25], [2075.0, 12447.2], [2067.0, 9001.5], [2059.0, 9606.333333333334], [2107.0, 12538.0], [2099.0, 12552.0], [2083.0, 12444.0], [2291.0, 12334.0], [2187.0, 11594.0], [2251.0, 9596.0], [2259.0, 9610.666666666666], [2267.0, 9417.333333333334], [2203.0, 9400.0], [2219.0, 9688.5], [2227.0, 9488.0], [2211.0, 12534.0], [2411.0, 9963.777777777776], [2419.0, 12540.0], [2371.0, 11232.8], [2379.0, 12429.0], [2387.0, 9208.5], [2395.0, 9164.0], [2403.0, 11014.714285714286], [2323.0, 12497.0], [2315.0, 12550.5], [2355.0, 10538.777777777777], [2363.0, 9667.5], [2347.0, 9538.666666666668], [2555.0, 11092.0], [2547.0, 10612.0], [2499.0, 12313.0], [2523.0, 9303.4], [2451.0, 12403.0], [2459.0, 12420.0], [2531.0, 9574.5], [2483.0, 12530.0], [2587.0, 12293.0], [2635.0, 12323.466666666667], [2619.0, 10273.0], [2611.0, 9693.09090909091], [2595.0, 11110.846153846156], [2755.0, 11017.666666666666], [2803.0, 11869.0], [2763.0, 9667.0], [2771.0, 12315.333333333334], [2699.0, 10890.25], [2747.0, 9201.0], [2707.0, 12294.2], [2715.0, 12239.0], [2739.0, 11601.083333333334], [2915.0, 10162.428571428572], [2883.0, 11919.714285714284], [2899.0, 12306.263157894738], [2891.0, 9381.0], [2923.0, 11030.5], [2843.0, 12420.0], [2835.0, 11891.0], [2827.0, 12343.5], [2819.0, 11875.333333333334], [2859.0, 9692.0], [2851.0, 9416.5], [3043.0, 9318.6], [3051.0, 12360.0], [3011.0, 12160.75], [3027.0, 9500.75], [3035.0, 11831.5], [2971.0, 9315.5], [2955.0, 12351.624999999998], [2947.0, 9660.0], [2987.0, 12354.666666666666], [2979.0, 8813.0], [3163.0, 9334.285714285714], [3147.0, 9558.0], [3083.0, 9238.0], [3299.0, 9912.5], [3203.0, 8952.875], [3275.0, 10558.5], [3251.0, 11185.333333333334], [3259.0, 8555.0], [3267.0, 9411.0], [3347.0, 8399.0], [3339.0, 8810.0], [3331.0, 8279.0], [537.0, 12753.0], [533.0, 12601.0], [523.0, 12701.349999999999], [515.0, 10395.0], [541.0, 10043.5], [535.0, 10030.333333333334], [527.0, 9678.0], [525.0, 9990.833333333334], [513.0, 10017.0], [549.0, 9442.0], [575.0, 12425.25], [569.0, 12623.5], [561.0, 11827.5], [557.0, 11312.0], [565.0, 9649.999999999998], [563.0, 9312.0], [559.0, 9346.0], [553.0, 9925.75], [547.0, 10042.0], [545.0, 9982.0], [607.0, 12215.0], [601.0, 12219.0], [591.0, 9791.4], [585.0, 10066.0], [581.0, 9744.0], [577.0, 10067.0], [635.0, 12620.333333333334], [637.0, 12651.25], [633.0, 12622.4], [615.0, 12197.0], [613.0, 12213.0], [611.0, 12194.0], [617.0, 9851.166666666666], [625.0, 12687.8], [627.0, 11123.5], [631.0, 9546.454545454544], [667.0, 12643.5], [665.0, 12182.5], [651.0, 9731.5], [649.0, 9850.5], [703.0, 12621.714285714284], [699.0, 12569.0], [691.0, 12766.0], [689.0, 12157.0], [675.0, 12142.0], [729.0, 12592.2], [721.0, 12765.0], [723.0, 12703.0], [731.0, 12307.0], [711.0, 11561.666666666666], [719.0, 9520.75], [707.0, 9867.5], [717.0, 11571.8], [713.0, 10744.333333333332], [727.0, 12179.0], [761.0, 12211.333333333334], [767.0, 12180.6], [753.0, 12063.6], [765.0, 12342.8], [763.0, 9922.5], [751.0, 12558.6], [743.0, 12716.5], [747.0, 12731.333333333334], [745.0, 9690.5], [749.0, 9936.0], [755.0, 10536.666666666666], [759.0, 9449.0], [775.0, 11080.714285714284], [795.0, 11596.5], [793.0, 12120.0], [785.0, 10799.666666666666], [787.0, 9490.0], [797.0, 9633.5], [773.0, 12162.0], [771.0, 12188.5], [779.0, 10173.75], [777.0, 9968.0], [781.0, 9474.25], [827.0, 12608.4], [831.0, 12627.5], [817.0, 12151.0], [829.0, 12538.25], [825.0, 12699.0], [803.0, 12617.0], [801.0, 12497.0], [813.0, 12588.5], [821.0, 12413.666666666666], [861.0, 12270.0], [863.0, 12137.0], [857.0, 12721.0], [839.0, 9872.0], [837.0, 12583.0], [855.0, 10346.777777777777], [843.0, 10863.5], [847.0, 9477.666666666666], [833.0, 9878.0], [845.0, 9431.0], [853.0, 9619.0], [851.0, 9968.5], [849.0, 9675.333333333334], [891.0, 12638.333333333332], [883.0, 12755.0], [875.0, 12180.0], [873.0, 12586.875], [921.0, 11748.666666666668], [927.0, 12156.5], [925.0, 9259.0], [897.0, 12539.0], [913.0, 12349.777777777777], [917.0, 9656.5], [915.0, 9909.0], [911.0, 9688.75], [907.0, 9195.0], [905.0, 9955.5], [957.0, 12356.090909090908], [939.0, 10932.5], [959.0, 9944.0], [949.0, 9949.5], [947.0, 9602.5], [941.0, 9673.0], [937.0, 9864.0], [965.0, 12318.0], [989.0, 10199.5], [987.0, 11268.0], [985.0, 9906.5], [967.0, 9690.333333333334], [981.0, 12604.142857142857], [983.0, 9744.4], [991.0, 9587.222222222223], [977.0, 9530.42857142857], [975.0, 11328.5], [973.0, 10355.333333333334], [969.0, 9658.0], [961.0, 12124.0], [963.0, 9912.0], [1017.0, 12587.0], [1013.0, 10681.166666666666], [1011.0, 9917.0], [995.0, 10209.0], [1007.0, 9793.2], [993.0, 9647.333333333334], [1005.0, 12669.0], [1003.0, 10649.333333333334], [997.0, 10784.0], [1023.0, 9936.0], [1021.0, 9475.0], [1019.0, 9502.5], [1082.0, 12685.0], [1062.0, 12657.0], [1054.0, 12453.0], [1050.0, 12586.0], [1074.0, 9322.857142857143], [1042.0, 9849.333333333334], [1026.0, 9781.666666666666], [1118.0, 12304.0], [1138.0, 12287.0], [1114.0, 10898.4], [1110.0, 12507.5], [1106.0, 12717.0], [1102.0, 12456.0], [1202.0, 11167.625], [1210.0, 10217.062500000002], [1206.0, 9877.0], [1154.0, 12601.75], [1162.0, 12589.0], [1170.0, 12410.5], [1198.0, 12091.0], [1194.0, 12132.0], [1250.0, 12421.0], [1238.0, 12421.666666666666], [1234.0, 12716.0], [1262.0, 12126.0], [1258.0, 12653.0], [1254.0, 12441.0], [1338.0, 12252.0], [1318.0, 12637.0], [1326.0, 12504.0], [1342.0, 12543.0], [1334.0, 12470.0], [1330.0, 12478.666666666666], [1306.0, 12064.5], [1294.0, 9701.25], [1302.0, 12700.0], [1298.0, 12498.0], [1402.0, 9214.0], [1378.0, 12290.0], [1386.0, 12698.0], [1346.0, 12113.571428571428], [1362.0, 12552.0], [1374.0, 9901.0], [1370.0, 9888.5], [1390.0, 12362.4], [1406.0, 9134.5], [1394.0, 9444.166666666668], [1354.0, 9554.2], [1350.0, 9475.0], [1382.0, 9827.0], [1466.0, 12597.5], [1462.0, 12047.285714285714], [1446.0, 10517.0], [1450.0, 9915.0], [1442.0, 10606.333333333334], [1470.0, 9892.0], [1414.0, 12085.555555555555], [1410.0, 12063.5], [1422.0, 12498.5], [1426.0, 12351.0], [1534.0, 12426.0], [1502.0, 12095.5], [1482.0, 12592.666666666666], [1498.0, 10286.0], [1494.0, 10660.666666666666], [1474.0, 9689.5], [1590.0, 12495.0], [1594.0, 12243.0], [1570.0, 12497.0], [1574.0, 12579.0], [1566.0, 12591.0], [1562.0, 12603.0], [1558.0, 12040.0], [1554.0, 12106.0], [1582.0, 12269.25], [1662.0, 10425.8], [1610.0, 12128.0], [1606.0, 10660.333333333334], [1626.0, 12486.75], [1658.0, 9330.0], [1642.0, 9636.666666666666], [1726.0, 12598.0], [1678.0, 12030.0], [1722.0, 9868.0], [1710.0, 12014.5], [1698.0, 12294.166666666668], [1690.0, 12237.88888888889], [1666.0, 10864.777777777777], [1670.0, 12592.0], [1686.0, 12590.0], [1682.0, 11883.0], [1762.0, 12392.0], [1766.0, 12648.0], [1770.0, 12604.0], [1778.0, 12368.0], [1750.0, 12637.0], [1734.0, 11567.333333333334], [1730.0, 9595.0], [1830.0, 11246.5], [1854.0, 12583.0], [1850.0, 12574.0], [1842.0, 12510.666666666666], [1838.0, 12544.0], [1826.0, 9653.0], [1918.0, 12615.2], [1906.0, 9869.23076923077], [1894.0, 9478.666666666664], [1890.0, 9810.2], [1862.0, 12462.166666666668], [1878.0, 12385.428571428572], [1874.0, 9414.333333333334], [1886.0, 9521.142857142857], [1898.0, 9654.333333333332], [1974.0, 9794.0], [1978.0, 12514.0], [1982.0, 10136.600000000002], [1954.0, 10526.571428571428], [1922.0, 12541.0], [1930.0, 9382.0], [1942.0, 12015.0], [1946.0, 9124.0], [1962.0, 9338.0], [1958.0, 12428.0], [2038.0, 10520.666666666666], [2042.0, 10476.5], [2046.0, 9729.0], [2018.0, 12603.0], [2022.0, 9508.25], [2026.0, 11117.0], [2034.0, 10353.0], [1986.0, 12622.0], [1990.0, 12321.0], [1998.0, 12495.666666666666], [1994.0, 9622.0], [2002.0, 12575.0], [2030.0, 9919.625], [2124.0, 12434.333333333334], [2140.0, 12473.6], [2076.0, 12622.5], [2068.0, 10584.466666666669], [2060.0, 9678.5], [2108.0, 12362.5], [2100.0, 12606.0], [2196.0, 12479.0], [2284.0, 12364.0], [2228.0, 9322.666666666666], [2220.0, 11168.111111111111], [2268.0, 12558.0], [2252.0, 11292.4], [2300.0, 9523.0], [2412.0, 9935.142857142857], [2372.0, 9840.285714285714], [2380.0, 12476.333333333334], [2388.0, 10701.333333333334], [2396.0, 10355.5], [2428.0, 12539.0], [2404.0, 10108.4], [2324.0, 12284.5], [2316.0, 12519.0], [2364.0, 11693.333333333334], [2356.0, 10447.5], [2340.0, 12359.0], [2444.0, 12505.0], [2556.0, 9882.0], [2548.0, 11972.0], [2508.0, 12327.214285714286], [2436.0, 12523.0], [2452.0, 12578.0], [2460.0, 12441.5], [2492.0, 12324.0], [2484.0, 12501.5], [2468.0, 12534.0], [2580.0, 12451.0], [2684.0, 12488.0], [2628.0, 9517.933333333334], [2660.0, 9819.0], [2564.0, 10786.25], [2572.0, 9743.0], [2620.0, 10523.7], [2612.0, 12546.0], [2604.0, 11969.0], [2596.0, 9773.0], [2716.0, 9278.2], [2764.0, 8904.0], [2756.0, 8893.0], [2804.0, 12359.0], [2700.0, 9340.3], [2740.0, 12232.0], [2732.0, 9427.333333333334], [2748.0, 9079.666666666666], [2772.0, 11016.888888888889], [2916.0, 12200.0], [2924.0, 11825.0], [2940.0, 12360.5], [2932.0, 12458.0], [2844.0, 12026.0], [2836.0, 11854.333333333334], [2868.0, 12315.8], [2860.0, 11823.052631578945], [2852.0, 9427.0], [2972.0, 12287.0], [3044.0, 12192.333333333334], [3020.0, 11832.0], [3028.0, 9465.75], [2964.0, 12103.0], [2956.0, 9397.0], [2948.0, 11117.333333333334], [2988.0, 11835.5], [3140.0, 9160.333333333334], [3124.0, 9229.857142857143], [3108.0, 9311.0], [3084.0, 9584.0], [3252.0, 9486.0], [3276.0, 12115.25], [3236.0, 9400.142857142857], [3260.0, 9369.0], [3316.0, 8851.2], [3308.0, 9224.5], [3268.0, 9424.0], [3332.0, 8005.0], [3340.0, 8825.0], [3404.0, 8395.6], [3372.0, 8312.0], [3356.0, 8463.0], [3348.0, 8664.0], [3500.0, 11093.003710575138], [2061.0, 9795.0], [2117.0, 11998.0], [2125.0, 12559.0], [2173.0, 12462.0], [2053.0, 9702.5], [2077.0, 12431.0], [2069.0, 9770.0], [2109.0, 12543.5], [2101.0, 12370.0], [2093.0, 12375.0], [2197.0, 9415.5], [2253.0, 10642.5], [2189.0, 12396.5], [2229.0, 12314.0], [2205.0, 9370.111111111111], [2269.0, 9623.2], [2261.0, 9605.0], [2413.0, 12407.666666666666], [2373.0, 11298.0], [2381.0, 11033.0], [2389.0, 10824.375], [2397.0, 9768.333333333334], [2421.0, 12519.5], [2333.0, 9634.333333333334], [2317.0, 9357.833333333334], [2309.0, 9573.0], [2325.0, 9746.0], [2365.0, 10486.666666666666], [2357.0, 10789.6], [2341.0, 10257.750000000002], [2533.0, 9547.333333333334], [2453.0, 12460.5], [2541.0, 9737.0], [2557.0, 9763.0], [2525.0, 10673.0], [2517.0, 9505.0], [2461.0, 12435.666666666666], [2477.0, 12393.0], [2469.0, 12601.0], [2573.0, 9489.888888888889], [2565.0, 12135.333333333334], [2661.0, 9538.75], [2685.0, 12366.0], [2677.0, 12288.5], [2621.0, 9544.666666666666], [2613.0, 12451.333333333334], [2701.0, 12139.666666666666], [2717.0, 12487.0], [2693.0, 12358.75], [2741.0, 10587.0], [2733.0, 10477.5], [2773.0, 12403.0], [2765.0, 8955.0], [2757.0, 9553.333333333334], [2925.0, 12322.0], [2917.0, 12339.0], [2893.0, 9987.875], [2901.0, 12441.0], [2941.0, 12298.0], [2885.0, 9465.5], [2845.0, 12296.0], [2821.0, 12324.25], [2861.0, 9665.0], [2853.0, 9348.25], [3045.0, 12319.0], [3061.0, 9418.0], [3053.0, 9352.0], [3069.0, 9615.5], [3021.0, 12110.4], [3037.0, 12341.666666666666], [2973.0, 12363.0], [2957.0, 12027.0], [2949.0, 8902.0], [3005.0, 9337.785714285716], [3077.0, 9220.125000000002], [3173.0, 12198.0], [3125.0, 9553.0], [3117.0, 9115.25], [3189.0, 9254.5], [3181.0, 9009.8], [3149.0, 9292.5], [3141.0, 9534.0], [3301.0, 9914.0], [3261.0, 9458.0], [3317.0, 9270.0], [3309.0, 9218.0], [3285.0, 9086.333333333334], [3277.0, 8737.0], [3269.0, 8535.0], [3421.0, 7935.0], [3349.0, 8636.0], [3341.0, 8772.0], [3493.0, 12268.25], [1083.0, 12429.0], [1075.0, 12532.0], [1071.0, 12734.0], [1063.0, 12559.0], [1079.0, 9250.0], [1067.0, 9656.5], [1035.0, 9779.0], [1027.0, 9491.818181818182], [1139.0, 12671.0], [1143.0, 12539.6], [1151.0, 10409.75], [1147.0, 12543.375], [1099.0, 12666.333333333334], [1091.0, 12628.0], [1103.0, 12638.0], [1115.0, 12661.0], [1111.0, 10765.333333333334], [1107.0, 12523.0], [1131.0, 12631.5], [1211.0, 12686.0], [1203.0, 12627.0], [1207.0, 9203.0], [1215.0, 12579.0], [1187.0, 12129.0], [1155.0, 12639.0], [1159.0, 12654.0], [1171.0, 12486.333333333334], [1199.0, 12104.0], [1231.0, 12114.0], [1275.0, 12602.0], [1223.0, 12608.5], [1227.0, 12680.5], [1235.0, 12086.0], [1243.0, 12631.0], [1263.0, 12398.5], [1259.0, 12646.0], [1255.0, 12702.0], [1335.0, 12431.0], [1343.0, 12614.0], [1315.0, 12563.42857142857], [1319.0, 12518.0], [1327.0, 12155.0], [1287.0, 12098.0], [1295.0, 9627.25], [1311.0, 12458.0], [1299.0, 10502.333333333334], [1303.0, 12560.0], [1355.0, 9826.0], [1375.0, 12121.333333333334], [1383.0, 12692.0], [1367.0, 12261.0], [1363.0, 12707.0], [1391.0, 12063.0], [1403.0, 9797.0], [1387.0, 9381.5], [1351.0, 9824.5], [1347.0, 9419.0], [1471.0, 12589.0], [1439.0, 12086.0], [1415.0, 10426.333333333334], [1423.0, 12536.0], [1467.0, 9548.75], [1463.0, 9594.0], [1447.0, 9845.5], [1419.0, 9351.0], [1483.0, 12485.666666666666], [1527.0, 12394.5], [1475.0, 12574.6], [1495.0, 11210.0], [1491.0, 12502.5], [1519.0, 12132.874999999998], [1507.0, 12087.0], [1599.0, 12594.0], [1579.0, 12582.0], [1591.0, 12184.0], [1539.0, 12316.142857142859], [1567.0, 12615.0], [1547.0, 12270.0], [1563.0, 12373.0], [1663.0, 12110.0], [1611.0, 10154.0], [1627.0, 12473.5], [1659.0, 9731.5], [1607.0, 9170.0], [1699.0, 12482.0], [1679.0, 11123.909090909092], [1727.0, 9619.0], [1715.0, 9799.0], [1683.0, 9642.0], [1675.0, 9561.333333333334], [1779.0, 12169.0], [1763.0, 12561.333333333334], [1759.0, 12079.0], [1731.0, 10073.166666666668], [1739.0, 12597.333333333334], [1775.0, 12154.666666666666], [1771.0, 12567.0], [1855.0, 12349.75], [1851.0, 12547.0], [1835.0, 10276.142857142857], [1831.0, 9820.0], [1827.0, 9494.5], [1803.0, 12143.111111111111], [1795.0, 12476.785714285714], [1811.0, 12547.0], [1823.0, 9585.0], [1839.0, 12428.666666666666], [1915.0, 12384.333333333334], [1919.0, 12572.0], [1891.0, 9549.5], [1875.0, 12476.0], [1899.0, 10929.0], [1903.0, 9714.0], [1879.0, 9567.75], [1927.0, 9824.0], [1975.0, 9752.57142857143], [1955.0, 9702.70588235294], [1951.0, 9299.0], [1947.0, 9050.0], [1923.0, 11754.5], [1931.0, 9030.333333333334], [1971.0, 9283.0], [1943.0, 9356.75], [1967.0, 11562.666666666666], [2047.0, 9908.272727272726], [2043.0, 10711.666666666666], [2027.0, 11275.6], [2035.0, 9299.75], [2039.0, 9571.0], [2015.0, 8966.5], [2003.0, 12588.0], [2031.0, 10509.333333333336], [2070.0, 9433.111111111111], [2166.0, 11983.0], [2142.0, 12033.0], [2174.0, 12453.833333333332], [2062.0, 9582.4], [2054.0, 9986.4], [2110.0, 12483.0], [2094.0, 12298.0], [2086.0, 12005.0], [2190.0, 10767.5], [2198.0, 10853.833333333334], [2230.0, 9106.0], [2214.0, 12407.5], [2222.0, 9297.0], [2254.0, 10342.333333333334], [2262.0, 9389.0], [2270.0, 9434.5], [2430.0, 12490.666666666666], [2414.0, 12494.0], [2374.0, 9450.25], [2382.0, 12498.0], [2390.0, 10951.0], [2398.0, 11705.857142857143], [2422.0, 12284.0], [2406.0, 10596.333333333334], [2334.0, 12460.333333333334], [2310.0, 10438.333333333334], [2366.0, 10071.75], [2358.0, 12414.0], [2342.0, 9772.0], [2550.0, 9329.8], [2502.0, 12456.0], [2510.0, 9700.0], [2518.0, 9687.0], [2542.0, 11284.666666666666], [2438.0, 12140.0], [2446.0, 12449.25], [2454.0, 12412.4], [2462.0, 12535.0], [2534.0, 9486.714285714286], [2470.0, 12444.0], [2662.0, 9956.4], [2630.0, 12448.5], [2654.0, 9712.0], [2686.0, 12263.5], [2566.0, 11493.333333333334], [2622.0, 9632.75], [2574.0, 9750.0], [2614.0, 12320.666666666666], [2606.0, 10447.5], [2598.0, 9473.666666666666], [2710.0, 12426.666666666666], [2806.0, 10670.5], [2758.0, 12393.666666666666], [2766.0, 11019.0], [2750.0, 12374.444444444445], [2694.0, 12535.0], [2702.0, 9536.8], [2790.0, 9176.0], [2742.0, 10721.285714285714], [2734.0, 9496.666666666666], [2726.0, 9513.0], [2782.0, 12166.75], [2774.0, 12381.0], [2918.0, 12321.25], [2942.0, 12166.0], [2926.0, 11239.333333333334], [2894.0, 11893.0], [2910.0, 9403.0], [2902.0, 12359.0], [2846.0, 12413.333333333334], [2838.0, 12275.0], [2878.0, 11900.0], [2862.0, 9409.0], [2854.0, 9569.0], [3062.0, 8726.0], [3046.0, 12216.0], [3030.0, 11002.5], [3038.0, 9475.071428571428], [3014.0, 9295.0], [3054.0, 9327.5], [2958.0, 9481.0], [2950.0, 9620.0], [3006.0, 11848.0], [2998.0, 12054.5], [2982.0, 9269.866666666669], [3102.0, 9134.25], [3182.0, 9642.333333333334], [3142.0, 12389.0], [3126.0, 12350.0], [3198.0, 9298.0], [3326.0, 8662.75], [3318.0, 9126.0], [3310.0, 9138.0], [3254.0, 8840.0], [3278.0, 9286.0], [3270.0, 8618.0], [3350.0, 8390.0], [3342.0, 7780.0], [3334.0, 8250.5], [2071.0, 9815.625], [2175.0, 12569.0], [2127.0, 10548.6], [2143.0, 11974.0], [2111.0, 12517.666666666666], [2055.0, 9464.0], [2079.0, 12405.5], [2103.0, 12579.333333333334], [2095.0, 12314.5], [2207.0, 12329.0], [2303.0, 9443.333333333334], [2255.0, 9360.666666666666], [2271.0, 9339.0], [2239.0, 11326.666666666666], [2183.0, 12420.0], [2199.0, 9486.2], [2191.0, 9758.0], [2223.0, 12496.333333333334], [2231.0, 9436.0], [2215.0, 12389.2], [2407.0, 11796.25], [2431.0, 12544.666666666666], [2375.0, 9160.0], [2383.0, 12472.5], [2391.0, 11547.666666666666], [2415.0, 12400.0], [2335.0, 12601.0], [2319.0, 9370.142857142857], [2367.0, 9733.0], [2311.0, 9534.5], [2359.0, 9537.5], [2351.0, 12135.0], [2343.0, 9671.0], [2559.0, 9359.0], [2543.0, 11627.533333333335], [2511.0, 10134.0], [2519.0, 10921.5], [2527.0, 9464.0], [2495.0, 12420.666666666666], [2439.0, 12524.0], [2455.0, 12523.0], [2463.0, 12425.5], [2487.0, 11808.25], [2471.0, 12595.0], [2575.0, 11014.90909090909], [2687.0, 11033.4], [2663.0, 12434.363636363636], [2583.0, 12376.0], [2615.0, 9366.0], [2623.0, 9490.25], [2567.0, 9644.0], [2607.0, 10666.0], [2599.0, 9740.0], [2767.0, 12479.0], [2775.0, 9366.0], [2751.0, 9447.263157894738], [2735.0, 12248.0], [2927.0, 9621.6], [2895.0, 9429.5], [2911.0, 9687.0], [2943.0, 9397.0], [2847.0, 12285.0], [2823.0, 10201.5], [2863.0, 11748.75], [2855.0, 9684.0], [2975.0, 12198.0], [3015.0, 9193.75], [3023.0, 12283.0], [3031.0, 12434.0], [2959.0, 9458.999999999998], [3007.0, 12364.0], [2951.0, 9556.5], [2999.0, 12341.333333333334], [2991.0, 9441.625], [2983.0, 10777.5], [3175.0, 12097.0], [3127.0, 8976.5], [3111.0, 9229.5], [3303.0, 11074.333333333332], [3327.0, 8529.0], [3207.0, 9332.75], [3247.0, 9013.42857142857], [3239.0, 9236.333333333334], [3263.0, 9060.5], [3319.0, 9212.0], [3311.0, 8304.0], [3279.0, 8579.0], [3271.0, 9345.0], [3351.0, 8589.0], [3343.0, 8114.0], [1.0, 12136.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1515.0490054450484, 9166.612179131042]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1008.3333333333334, "minX": 1.73053386E12, "maxY": 40256.61666666667, "series": [{"data": [[1.73291574E12, 14250.0], [1.73053758E12, 14250.0], [1.73053728E12, 40256.61666666667], [1.73053386E12, 34328.933333333334], [1.73053782E12, 14250.0], [1.73291514E12, 14250.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73291574E12, 1033.3333333333333], [1.73053758E12, 1008.3333333333334], [1.73053728E12, 7058.333333333333], [1.73053386E12, 7056.316666666667], [1.73053782E12, 1008.3333333333334], [1.73291514E12, 1033.3333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73291574E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1937.5540000000005, "minX": 1.73053386E12, "maxY": 12433.511288939731, "series": [{"data": [[1.73291574E12, 2231.6000000000026], [1.73053758E12, 3854.9480000000003], [1.73053728E12, 9478.49257142855], [1.73053386E12, 12433.511288939731], [1.73053782E12, 1937.5540000000005], [1.73291514E12, 3597.424000000001]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73291574E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1918.9040000000007, "minX": 1.73053386E12, "maxY": 12431.626178908242, "series": [{"data": [[1.73291574E12, 2231.4700000000003], [1.73053758E12, 3849.816000000001], [1.73053728E12, 9478.387428571432], [1.73053386E12, 12431.626178908242], [1.73053782E12, 1918.9040000000007], [1.73291514E12, 3585.9019999999964]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73291574E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1507.901999999999, "minX": 1.73053386E12, "maxY": 10236.648470991711, "series": [{"data": [[1.73291574E12, 1507.901999999999], [1.73053758E12, 3526.2480000000023], [1.73053728E12, 8599.522285714278], [1.73053386E12, 10236.648470991711], [1.73053782E12, 1681.6000000000006], [1.73291514E12, 3429.984000000001]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73291574E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1452.0, "minX": 1.73053782E12, "maxY": 1999.0, "series": [{"data": [[1.73291574E12, 1999.0], [1.73053782E12, 1998.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73291574E12, 1969.7], [1.73053782E12, 1949.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73291574E12, 1998.1399999999999], [1.73053782E12, 1996.1100000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73291574E12, 1986.7], [1.73053782E12, 1976.25]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.73291574E12, 1489.0], [1.73053782E12, 1452.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73291574E12, 1811.5], [1.73053782E12, 1734.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73291574E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1703.0, "minX": 1.0, "maxY": 12537.0, "series": [{"data": [[155.0, 1703.0], [343.0, 1887.5], [500.0, 1734.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 12243.5], [606.0, 9979.0], [155.0, 2278.0], [2742.0, 12537.0], [170.0, 8277.5], [2724.0, 9588.5], [343.0, 2398.0], [757.0, 12223.0], [500.0, 3675.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2742.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1701.0, "minX": 1.0, "maxY": 12537.0, "series": [{"data": [[155.0, 1701.0], [343.0, 1887.5], [500.0, 1714.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 12243.5], [606.0, 9979.0], [155.0, 2276.0], [2742.0, 12537.0], [170.0, 8277.5], [2724.0, 9588.5], [343.0, 2398.0], [757.0, 12206.0], [500.0, 3664.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2742.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.7305338E12, "maxY": 58.333333333333336, "series": [{"data": [[1.7305338E12, 58.31666666666667], [1.73291508E12, 8.333333333333334], [1.73291568E12, 8.333333333333334], [1.73053758E12, 8.333333333333334], [1.73053728E12, 58.333333333333336], [1.73053782E12, 8.333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73291568E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.73053386E12, "maxY": 45.63333333333333, "series": [{"data": [[1.73291574E12, 8.333333333333334], [1.73053758E12, 8.333333333333334], [1.73053728E12, 16.816666666666666], [1.73053386E12, 12.683333333333334], [1.73053782E12, 8.333333333333334], [1.73291514E12, 8.333333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.73053728E12, 41.516666666666666], [1.73053386E12, 45.63333333333333]], "isOverall": false, "label": "502", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73291574E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.3666666666666667, "minX": 1.73053386E12, "maxY": 58.333333333333336, "series": [{"data": [[1.73291574E12, 5.966666666666667], [1.73053758E12, 8.333333333333334], [1.73053728E12, 58.333333333333336], [1.73053386E12, 58.31666666666667], [1.73053782E12, 3.966666666666667], [1.73291514E12, 8.333333333333334]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.73291574E12, 2.3666666666666667], [1.73053782E12, 4.366666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73291574E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.3666666666666667, "minX": 1.73053386E12, "maxY": 58.333333333333336, "series": [{"data": [[1.73291574E12, 2.3666666666666667], [1.73053782E12, 4.366666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.73291574E12, 5.966666666666667], [1.73053758E12, 8.333333333333334], [1.73053728E12, 58.333333333333336], [1.73053386E12, 58.31666666666667], [1.73053782E12, 3.966666666666667], [1.73291514E12, 8.333333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73291574E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

